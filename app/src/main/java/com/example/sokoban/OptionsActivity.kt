package com.example.sokoban

import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.widget.Button
import android.widget.CheckBox
import android.widget.SeekBar
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.sokoban.db.DatabaseHelper
import com.example.sokoban.db.models.Settings
import com.example.sokoban.db.repositories.SettingsRepository

class OptionsActivity : AppCompatActivity() {

    private lateinit var sharedPreferences: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_options)

        sharedPreferences = getSharedPreferences("UserSession", MODE_PRIVATE) // Consistent SharedPreferences key

        val seekbarMasterVolume: SeekBar = findViewById(R.id.seekbar_master_volume)
        val seekbarMusicVolume: SeekBar = findViewById(R.id.seekbar_music_volume)
        val seekbarSoundEffectsVolume: SeekBar = findViewById(R.id.seekbar_sound_effects_volume)
        val btnSave: Button = findViewById(R.id.btn_save)
        val cbMusic: CheckBox = findViewById(R.id.checkbox_music)
        val cbSound: CheckBox = findViewById(R.id.checkbox_sound_effects)

        val dbHelper = DatabaseHelper(this)
        val settingsRepository = SettingsRepository(dbHelper)

        // Retrieve user ID from SharedPreferences
        val userId = sharedPreferences.getLong("userId", -1L)

        if (userId == -1L) {
            // User not logged in, show a message and redirect to login
            Toast.makeText(this, "Please log in to access options.", Toast.LENGTH_SHORT).show()
            val intent = Intent(this, LoginActivity::class.java)
            startActivity(intent)
            finish() // Close OptionsActivity after redirecting to login
        } else {
            // User is logged in, load the settings
            val settings = settingsRepository.getSettings(userId)

            if (settings != null) {
                cbMusic.isChecked = settings.musicEnabled
                cbSound.isChecked = settings.soundEnabled
                seekbarMasterVolume.progress = settings.masterVolume
                seekbarMusicVolume.progress = settings.musicVolume
                seekbarSoundEffectsVolume.progress = settings.soundVolume
            }
        }

        btnSave.setOnClickListener {
            if (userId != -1L) {
                val newSettings = Settings(
                    id = 0L, // This will be auto-generated by the database
                    userId = userId, // Use the user ID from SharedPreferences
                    musicEnabled = cbMusic.isChecked, // Checkbox for music
                    soundEnabled = cbSound.isChecked, // Checkbox for sound
                    masterVolume = seekbarMasterVolume.progress, // Master volume progress
                    musicVolume = seekbarMusicVolume.progress, // Music volume progress
                    soundVolume = seekbarSoundEffectsVolume.progress // Sound volume progress
                )

                settingsRepository.saveSettings(newSettings)
                Toast.makeText(this, "Settings saved!", Toast.LENGTH_SHORT).show()
                finish()
            } else {
                Toast.makeText(this, "Failed to save settings. User not found.", Toast.LENGTH_SHORT).show()
            }
        }
    }
}
